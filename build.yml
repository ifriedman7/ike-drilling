---
- hosts: local
  connection: local
  gather_facts: false
  vars_files:
    - vars.yml
    - aws_keys.yml
  tasks:
    - name: create VPC
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
        state: present
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: vpc
    
    - name: associate subnet to the VPC
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        cidr: "{{ subnet_cidr }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        map_public: yes
        resource_tags:
          Name: "{{ subnet_name }}"
      register: subnet
 
    - name: create IGW
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
        tags:
          name: "{{ igw_name }}"
      register: igw
    
    - name: Create security group for EC2
      ec2_security_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ security_group }}"
        description: "{{ security_group }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 37529
            to_port: 37529
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 9000
            to_port: 9000
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Launch new EC2 instances
      ec2_instance:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ instance_name }}"
        network:
          groups: 
          - "{{ sg.group_id }}"
        security_groups:
        - "{{ sg.group_id }}"
        instance_type: "{{ instance_type }}"
        volumes:
        - device_name: /dev/sda1
          ebs:
            volume_size: 30
            delete_on_termination: true
        image_id: "{{ image }}"
        wait: true 
        region: "{{ region }}"
        key_name: "{{ keypair }}"
        tags: "{{ infra_tags }}"
      register: ec2

    - name: Add EC2 instances to inventory
      add_host:
        name: "{{ item.public_ip_address }}"
        groups: remote
      loop: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for_connection:
        delay: 60
        timeout: 120
      loop: "{{ ec2.instances }}"



