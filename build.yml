---
- hosts: local
  connection: local
  gather_facts: false
  vars_files:
    - vars.yml
    - aws_keys.yml
  tasks:
    - name: create VPC
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
        state: present
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
      register: vpc
    
    - name: associate subnet to the VPC
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        cidr: "{{ subnet_cidr }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        map_public: yes
        resource_tags:
          Name: "{{ subnet_name }}"
      register: subnet
 
    - name: create IGW
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        state: present
        tags:
          name: "{{ igw_name }}"
      register: igw
    - name: ec2_vpc_subnet_info
      ec2_vpc_subnet_info:
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        filters:
          vpc-id: "{{ vpc.vpc.id }}"
      register: ec2_vpc_subnet_info
      
    - name: VPC IGW Route Table
      vars:
        json: "{{ ec2_vpc_subnet_info }}"
        query: "subnets[].id"
        subnets: "{{ json | json_query(query) }}"
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        tags:
          Name: Internet
        subnets: "{{ subnets }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        
    - name: Create security group for EC2
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ security_group }}"
        vpc_id: "{{ vpc.vpc.id }}"
        description: "{{ security_group }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 37529
            to_port: 37529
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 9000
            to_port: 9000
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: sg
      
    - name: Create S3 bucket
      s3_bucket:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ bucket_name }}"
      
    - name: Launch new EC2 instances
      ec2_instance:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ instance_name }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        network:
          groups: 
          - "{{ sg.group_id }}"
        security_groups:
        - "{{ sg.group_id }}"
        instance_type: "{{ instance_type }}"
        volumes:
        - device_name: /dev/sda1
          ebs:
            volume_size: 30
            delete_on_termination: true
        image_id: "{{ image }}"
        wait: true 
        region: "{{ region }}"
        key_name: "{{ keypair }}"
        tags: "{{ infra_tags }}"
      register: ec2

    - name: Add EC2 instances to inventory
      add_host:
        name: "{{ item.public_ip_address }}"
        groups: remote
      loop: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for_connection:
        delay: 60
        timeout: 120
      loop: "{{ ec2.instances }}"

- hosts: remote
  remote_user: maintuser
  become: yes
  become_method: sudo
  gather_facts: yes
  vars_files:
    - vars.yml
    - aws_keys.yml
  tasks:
    - name: "Download EPEL RPM"
      get_url:
        url: https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
        dest: ./epel-release-latest-7.noarch.rpm
        mode: 0644
    - name: Install epel-release 
      shell: 
        cmd: sudo rpm -Uvh --replacepkgs ./epel-release-latest-7.noarch.rpm
        warn: false

    - name: Install docker prerequisites
      yum:
        name: 
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
          - epel-release
          - libcurl-devel
          - python
          - python-devel
          - python3-devel
          - python-pip
          - python2-pip
          - python-setuptools
          - nginx
          - git
          - s3fs-fuse
          - fuse
          - netcat
          - nmap-ncat
          - libselinux-python
          - python3
          - python3-pip
          - libselinux-python3
          - python-virtualenv
        state: present
        update_cache: yes
        enablerepo: epel
        skip_broken: yes
    - name: Upgrade all packages
      yum:
        name: 
          - '*'
        state: latest
    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/centos/gpg
        dest: /etc/yum.repos.d/docker-gpg
        mode: 0644

    - name: Configuring docker-ce repo
      get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
        mode: 0644
    - name: Install Docker packages
      yum:
        name: ['docker-ce','docker-ce-cli']
        state: present
    - name: Starting and Enabling Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install Docker-compose 
      shell: 
        cmd: curl -L "https://github.com/docker/compose/releases/download/2.3.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        warn: false

    - name: Pip setup for python3
      pip:
        name:
          - docker
          - docker-compose
        state: latest  
        executable: /usr/bin/pip3
        
    - name: mkdir for s3fs mount
      ansible.builtin.file: 
        state: directory
        path: /var/bucket
    - name: mkdir for s3fs cache
      ansible.builtin.file:
        state: directory
        path: /tmp/bucket-cache
    - name: create pw file
      shell: echo {{ aws_access_key }}:{{ aws_secret_key }} > ${HOME}/.passwd-s3fs && chmod 600 ${HOME}/.passwd-s3fs
    - name: Mount S3 bucket
      shell: s3fs drilling-bucket /var/bucket -o use_cache=/tmp/bucket-cache -o passwd_file=${HOME}/.passwd-s3fs -o allow_other
    - name: Delete S3 passwd file
      ansible.builtin.file: 
        state: absent
        path: ${HOME}/.passwd-s3fs

    - name: git clone the project
      shell:
        cmd: git clone https://github.com/ifriedman7/ike-drilling.git

    - name: Build the reader container
      shell:
        cmd: cd ike-drilling/reader && chmod 755 reader.sh && docker build --no-cache -t reader:latest . 
        warn: false

    - name: Build the writer container
      shell:
        cmd: cd ike-drilling/writer && chmod 755 writer.sh && docker build --no-cache -t writer:latest . 
        warn: false

    - name: load docker-compose
      shell:
        cmd: cd /home/{{ user }}/ike-drilling && sudo chmod 666 /var/run/docker.sock && /usr/local/bin/docker-compose up -d
        warn: false        
        

